import { URLSearchParams } from "url";
import { cleanPath } from "@parameter1/base-cms-utils";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";

$ const { perPage, totalCount, path } = input;
$ const asRels = defaultValue(input.asRels, false);
$ const { pagination: p } = out.global;

$ const totalPages = p.totalPages({ perPage, totalCount });
$ const nextPage = p.nextPage({ perPage, totalCount });
$ const prevPage = p.prevPage();

$ const nextQuery = new URLSearchParams({ ...input.query, page: nextPage });
$ const prevQuery = new URLSearchParams({ ...input.query, page: prevPage });

$ const nextHref = `/${cleanPath(path)}?${nextQuery}`;
$ const prevHref = `/${cleanPath(path)}?${prevQuery}`;

$ const blockName = "pagination-controls";

<if(totalCount)>
  <if(asRels)>
    <if(prevPage)>
      <link rel="prev" href=prevHref />
    </if>
    <if(nextPage)>
      <link rel="next" href=nextHref />
    </if>
  </if>
  <else>
    <marko-web-block name=blockName class=input.class>
      <if(prevPage)>
        <marko-web-link
          class=`btn btn-primary ${blockName}__prev`
          href=prevHref
        >
          Previous Page
        </marko-web-link>
      </if>
      <marko-web-element block-name=blockName name="pages">
        Page ${p.page} of ${totalPages}
      </marko-web-element>
      <if(nextPage)>
        <marko-web-link
          class=`btn btn-primary ${blockName}__next`
          href=nextHref
        >
          Next Page
        </marko-web-link>
      </if>
    </marko-web-block>
  </else>
</if>
