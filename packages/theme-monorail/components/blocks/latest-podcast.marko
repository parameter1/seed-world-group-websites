import queryFragment from "../../graphql/fragments/latest-podcast-block";
import sectionFragment from "../../graphql/fragments/section-info";

$ const queryParams = {
  sectionAlias: input.alias,
  includeContentTypes: ["Podcast"],
  limit: 1,
  queryFragment,
  sectionFragment,
};

$ const { site } = out.global;
$ const podcastLinks = site.getAsArray("podcastLinks");
$ const blockName = "latest-podcast";

<marko-web-query|{ nodes, section }| name="website-scheduled-content" params=queryParams>
  $ const [node] = nodes;
  <marko-web-block name=blockName>
    <marko-web-element block-name=blockName name="header">
      <marko-web-icon name="file" modifiers=[blockName] />
      ${section.name}
    </marko-web-element>

    <marko-web-node
      type=`${node.type}-content`
      card=true
      flush=true
      full-height=false
      modifiers=[blockName]
    >
      <@body>
        <@header>
          <@left>
            Latest Episode
          </@left>
        </@header>
        <@title tag="h5">
          <marko-web-content-short-name tag=null obj=node link=true />
        </@title>
        <@text modifiers=["more-episodes"]>
          <marko-web-website-section-name|{ value }| tag=null obj=section link=true>
            More episodes &raquo;
          </marko-web-website-section-name>
        </@text>
        <if(podcastLinks.length)>
          <@footer>
            <@left modifiers=["buttons"]>
              <for|link| of=podcastLinks>
                <marko-web-link
                  class=`btn btn-light ${blockName}__btn`
                  href=link.href
                  title=link.label
                  target="_blank"
                >
                  ${link.label}
                </marko-web-link>
              </for>
            </@left>
          </@footer>
        </if>
      </@body>
    </marko-web-node>
  </marko-web-block>
</marko-web-query>
